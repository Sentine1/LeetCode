public class Solution
{
    private bool Helper(int used, long todo, bool?[] memo, int[] nums, long target)
    {
        if (memo[used] == null)
        {
            memo[used] = false;

            long targ = (todo - 1) % target + 1;

            for (int i = 0; i < nums.Length; i++)
            {
                if ((((used >> i) & 1) == 0) && nums[i] <= targ)
                {
                    if (Helper(used | (1 << i), todo - nums[i], memo, nums, target))
                    {
                        memo[used] = true;
                        break;
                    }
                }
            }
        }

        return memo[used].Value;
    }

    private bool CanPartitionKSubsets(int[] nums, int k)
    {
        if(nums.Length < k)
        {
            return false;
        }

        checked
        {
            long sum = 0;
            for (int i = 0; i < nums.Length; i++)
            {
                sum += nums[i];
            }

            if (sum % k > 0)
            {
                return false;
            }

            bool?[] memo = new bool?[1 << nums.Length];
            memo[(1 << nums.Length) - 1] = true;
            return Helper(0, sum, memo, nums, sum / k);
        }
    }


    public bool Makesquare(int[] nums) => CanPartitionKSubsets(nums, 4);
}